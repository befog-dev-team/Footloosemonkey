// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminData {
  id            String   @id @default(uuid())
  talent        String   @unique
  individualFee String
  groupAFee     String
  groupBFee     String
  groupCFee     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Registration {
  id               String   @id @default(uuid())
  category         String
  groupName        String?
  email            String?
  name             String?
  age              Int?
  guardianNumber   String
  address          String
  talent           String
  charges          String
  videoSharing     Boolean
  offensiveContent Boolean
  incident         Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  members Member[]
}

model Member {
  id             String       @id @default(uuid())
  name           String
  email          String
  registrationId String
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
}

model Participant {
  id        String   @id @default(uuid())
  name      String
  email     String
  age       String
  address   String
  number    String
  talent    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  payments    Payment[]
}

model Payment {
  id            String      @id @default(uuid())
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id])
  amount        Float
  paymentStatus String
  paymentID     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Submission {
  id             String      @id @default(cuid())
  publicId       String      @unique
  participantId  String
  participant    Participant @relation(fields: [participantId], references: [id])
  postTitle      String
  description    String
  video          String
  profilepic     String
  duration       Float
  ageCriteria    String
  originalSize   String
  compressedSize String
  voteCount      Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  Vote Vote[]
}

model Vote {
  id           String   @id @default(uuid())
  userId       String
  submissionId String   @map("submission_id")
  createdAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id])

  @@unique([userId, submissionId])
}
